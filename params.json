{"tagline":"Processing library that lets you extract RGB, brightness, hue, and saturation channels from a PImage","body":"### Channels\r\n\r\n[Download Channels](https://github.com/downloads/atduskgreg/Channels/Channels.zip)\r\n\r\n<a href=\"http://www.flickr.com/photos/unavoidablegrain/7945413206/\" title=\"Processing Channels library demo by atduskgreg, on Flickr\"><img src=\"http://farm9.staticflickr.com/8303/7945413206_5e157c71ae.jpg\" width=\"486\"  alt=\"Processing Channels library demo\"></a>\r\n\r\nChannels is a Processing library that lets you extract the red, green, blue, hue, saturation, or brightness channels from a PImage. It works similarly to Processing's built-in [red()](http://processing.org/reference/red_.html), [green()](http://processing.org/reference/green_.html), [blue()](http://processing.org/reference/bluee_.html), [brightness()](http://processing.org/reference/brightness_.html), [hue()](http://processing.org/reference/hue_.html), and [saturation()](http://processing.org/reference/saturation_.html) functions, but instead of applying to individual pixels, Channels' equivalent functions apply to the entire image.\r\n\r\nExtracting individual channels can be useful for visualizing or analyzing images. Channels can be used to modify an image in place for display or to extract an array of int representing the pixels for the relevant channel.\r\n\r\n### Examples\r\n\r\nHere's an example of the first mode: modifying a PImage in place so it displays just one channel of the original image.\r\n\r\n````\r\nPImage myImage;\r\nvoid setup(){\r\n  size(500,500);\r\n  myImage = loadImage(\"testImage.png\"); // a square image around 500x500 pixels\r\n  Channels.red(this, myImage);\r\n}\r\n\r\nvoid draw(){\r\n  image(myImage,0,0);\r\n}\r\n````\r\n\r\nHere's an example of the second mode: extracting the pixels of a particular channel for use:\r\n\r\n````\r\nPImage myImage;\r\nint[] myPixels;\r\nvoid setup(){\r\n  size(500,500);\r\n  myImage = loadImage(testImage.png);\r\n  myPixels = new int[myImage.width * myImage.height];\r\n\r\n  myImage.loadPixels();\r\n  myPixels = Channels.red(myImage.pixels);\r\n}\r\n\r\nvoid draw(){\r\n  for(int i = 0; i < myPixels.length; i++){\r\n    // do something with the pixels in the red channel...\r\n  }\r\n}\r\n````\r\n\r\nAn example of something useful to do with the pixels of a given channel might be to run the marching squares algorithm on it using [the Isolines Processing library](http://makematics.com/code/Isolines).","name":"Channels","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}